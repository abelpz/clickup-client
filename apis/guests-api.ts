/* tslint:disable */
/* eslint-disable */
/**
 * clickup client
 * You can follow along at [https://clickup20.docs.apiary.io/#introduction/oauth2](https://clickup20.docs.apiary.io/#introduction/oauth2).  You'll need your personal token for this, just change the authorization header to include it.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * GuestsApi - axios parameter creator
 * @export
 */
export const GuestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to Folder
         * @param {string} folderId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGuesttoFolder: async (folderId: string, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling addGuesttoFolder.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling addGuesttoFolder.');
            }
            const localVarPath = `/api/v2/folder/{folder_id}/guest/{guest_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to List
         * @param {string} listId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGuesttoList: async (listId: string, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling addGuesttoList.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling addGuesttoList.');
            }
            const localVarPath = `/api/v2/list/{list_id}/guest/{guest_id}`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to Task
         * @param {string} body JSON Body: { &quot;permission_level&quot;: &quot;read&quot; || &quot;comment&quot; || &quot;edit&quot; || &quot;create&quot; }
         * @param {string} taskId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGuesttoTask: async (body: string, taskId: string, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addGuesttoTask.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling addGuesttoTask.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling addGuesttoTask.');
            }
            const localVarPath = `/api/v2/task/{task_id}/guest/{guest_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'text/plain';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Guest Username
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGuestUsername: async (teamId: number, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling editGuestUsername.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling editGuestUsername.');
            }
            const localVarPath = `/api/v2/team/{team_id}/guest/{guest_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * All the locations on the Workspace the guest has access too
         * @summary Get Guest
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuest: async (teamId: number, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getGuest.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling getGuest.');
            }
            const localVarPath = `/api/v2/team/{team_id}/guest/{guest_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The type of JSON to fill out: { \"email\": \"example@gmail.com\", \"can_edit_tags\": true || false, \"can_see_time_estimated\": true || false, \"can_see_time_spent\": true || false }
         * @summary Invite Guest to Workspace
         * @param {string} body The type of JSON to fill out: { &quot;email&quot;: &quot;example@gmail.com&quot;, &quot;can_edit_tags&quot;: true || false, &quot;can_see_time_estimated&quot;: true || false, &quot;can_see_time_spent&quot;: true || false }
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteGuesttoWorkspace: async (body: string, teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling inviteGuesttoWorkspace.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling inviteGuesttoWorkspace.');
            }
            const localVarPath = `/api/v2/team/{team_id}/guest`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Guest from Folder
         * @param {string} folderId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromFolder: async (folderId: string, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling removeGuestfromFolder.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling removeGuestfromFolder.');
            }
            const localVarPath = `/api/v2/folder/{folder_id}/guest/{guest_id}`
                .replace(`{${"folder_id"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Guest from List
         * @param {string} listId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromList: async (listId: string, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling removeGuestfromList.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling removeGuestfromList.');
            }
            const localVarPath = `/api/v2/list/{list_id}/guest/{guest_id}`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Guest from Task
         * @param {string} taskId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromTask: async (taskId: string, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling removeGuestfromTask.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling removeGuestfromTask.');
            }
            const localVarPath = `/api/v2/task/{task_id}/guest/{guest_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Guest from Workspace
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromWorkspace: async (teamId: number, guestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling removeGuestfromWorkspace.');
            }
            // verify required parameter 'guestId' is not null or undefined
            if (guestId === null || guestId === undefined) {
                throw new RequiredError('guestId','Required parameter guestId was null or undefined when calling removeGuestfromWorkspace.');
            }
            const localVarPath = `/api/v2/team/{team_id}/guest/{guest_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"guest_id"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestsApi - functional programming interface
 * @export
 */
export const GuestsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to Folder
         * @param {string} folderId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGuesttoFolder(folderId: string, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).addGuesttoFolder(folderId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to List
         * @param {string} listId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGuesttoList(listId: string, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).addGuesttoList(listId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to Task
         * @param {string} body JSON Body: { &quot;permission_level&quot;: &quot;read&quot; || &quot;comment&quot; || &quot;edit&quot; || &quot;create&quot; }
         * @param {string} taskId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGuesttoTask(body: string, taskId: string, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).addGuesttoTask(body, taskId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Edit Guest Username
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editGuestUsername(teamId: number, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).editGuestUsername(teamId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * All the locations on the Workspace the guest has access too
         * @summary Get Guest
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuest(teamId: number, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).getGuest(teamId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The type of JSON to fill out: { \"email\": \"example@gmail.com\", \"can_edit_tags\": true || false, \"can_see_time_estimated\": true || false, \"can_see_time_spent\": true || false }
         * @summary Invite Guest to Workspace
         * @param {string} body The type of JSON to fill out: { &quot;email&quot;: &quot;example@gmail.com&quot;, &quot;can_edit_tags&quot;: true || false, &quot;can_see_time_estimated&quot;: true || false, &quot;can_see_time_spent&quot;: true || false }
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteGuesttoWorkspace(body: string, teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).inviteGuesttoWorkspace(body, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove Guest from Folder
         * @param {string} folderId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeGuestfromFolder(folderId: string, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).removeGuestfromFolder(folderId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove Guest from List
         * @param {string} listId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeGuestfromList(listId: string, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).removeGuestfromList(listId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove Guest from Task
         * @param {string} taskId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeGuestfromTask(taskId: string, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).removeGuestfromTask(taskId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove Guest from Workspace
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeGuestfromWorkspace(teamId: number, guestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GuestsApiAxiosParamCreator(configuration).removeGuestfromWorkspace(teamId, guestId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GuestsApi - factory interface
 * @export
 */
export const GuestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to Folder
         * @param {string} folderId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGuesttoFolder(folderId: string, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).addGuesttoFolder(folderId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to List
         * @param {string} listId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGuesttoList(listId: string, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).addGuesttoList(listId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
         * @summary Add Guest to Task
         * @param {string} body JSON Body: { &quot;permission_level&quot;: &quot;read&quot; || &quot;comment&quot; || &quot;edit&quot; || &quot;create&quot; }
         * @param {string} taskId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGuesttoTask(body: string, taskId: string, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).addGuesttoTask(body, taskId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit Guest Username
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGuestUsername(teamId: number, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).editGuestUsername(teamId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * All the locations on the Workspace the guest has access too
         * @summary Get Guest
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuest(teamId: number, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).getGuest(teamId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * The type of JSON to fill out: { \"email\": \"example@gmail.com\", \"can_edit_tags\": true || false, \"can_see_time_estimated\": true || false, \"can_see_time_spent\": true || false }
         * @summary Invite Guest to Workspace
         * @param {string} body The type of JSON to fill out: { &quot;email&quot;: &quot;example@gmail.com&quot;, &quot;can_edit_tags&quot;: true || false, &quot;can_see_time_estimated&quot;: true || false, &quot;can_see_time_spent&quot;: true || false }
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteGuesttoWorkspace(body: string, teamId: number, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).inviteGuesttoWorkspace(body, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Guest from Folder
         * @param {string} folderId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromFolder(folderId: string, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).removeGuestfromFolder(folderId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Guest from List
         * @param {string} listId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromList(listId: string, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).removeGuestfromList(listId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Guest from Task
         * @param {string} taskId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromTask(taskId: string, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).removeGuestfromTask(taskId, guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Guest from Workspace
         * @param {number} teamId 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGuestfromWorkspace(teamId: number, guestId: string, options?: any): AxiosPromise<void> {
            return GuestsApiFp(configuration).removeGuestfromWorkspace(teamId, guestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuestsApi - object-oriented interface
 * @export
 * @class GuestsApi
 * @extends {BaseAPI}
 */
export class GuestsApi extends BaseAPI {
    /**
     * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
     * @summary Add Guest to Folder
     * @param {string} folderId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public addGuesttoFolder(folderId: string, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).addGuesttoFolder(folderId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
     * @summary Add Guest to List
     * @param {string} listId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public addGuesttoList(listId: string, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).addGuesttoList(listId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * JSON Body: { \"permission_level\": \"read\" || \"comment\" || \"edit\" || \"create\" }
     * @summary Add Guest to Task
     * @param {string} body JSON Body: { &quot;permission_level&quot;: &quot;read&quot; || &quot;comment&quot; || &quot;edit&quot; || &quot;create&quot; }
     * @param {string} taskId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public addGuesttoTask(body: string, taskId: string, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).addGuesttoTask(body, taskId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Edit Guest Username
     * @param {number} teamId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public editGuestUsername(teamId: number, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).editGuestUsername(teamId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * All the locations on the Workspace the guest has access too
     * @summary Get Guest
     * @param {number} teamId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public getGuest(teamId: number, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).getGuest(teamId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The type of JSON to fill out: { \"email\": \"example@gmail.com\", \"can_edit_tags\": true || false, \"can_see_time_estimated\": true || false, \"can_see_time_spent\": true || false }
     * @summary Invite Guest to Workspace
     * @param {string} body The type of JSON to fill out: { &quot;email&quot;: &quot;example@gmail.com&quot;, &quot;can_edit_tags&quot;: true || false, &quot;can_see_time_estimated&quot;: true || false, &quot;can_see_time_spent&quot;: true || false }
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public inviteGuesttoWorkspace(body: string, teamId: number, options?: any) {
        return GuestsApiFp(this.configuration).inviteGuesttoWorkspace(body, teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Remove Guest from Folder
     * @param {string} folderId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public removeGuestfromFolder(folderId: string, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).removeGuestfromFolder(folderId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Remove Guest from List
     * @param {string} listId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public removeGuestfromList(listId: string, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).removeGuestfromList(listId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Remove Guest from Task
     * @param {string} taskId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public removeGuestfromTask(taskId: string, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).removeGuestfromTask(taskId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Remove Guest from Workspace
     * @param {number} teamId 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestsApi
     */
    public removeGuestfromWorkspace(teamId: number, guestId: string, options?: any) {
        return GuestsApiFp(this.configuration).removeGuestfromWorkspace(teamId, guestId, options).then((request) => request(this.axios, this.basePath));
    }
}
