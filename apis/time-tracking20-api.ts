/* tslint:disable */
/* eslint-disable */
/**
 * clickup client
 * You can follow along at [https://clickup20.docs.apiary.io/#introduction/oauth2](https://clickup20.docs.apiary.io/#introduction/oauth2).  You'll need your personal token for this, just change the authorization header to include it.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * TimeTracking20Api - axios parameter creator
 * @export
 */
export const TimeTracking20ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add tags from time entries
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addtagsfromtimeentries: async (body: string, teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addtagsfromtimeentries.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling addtagsfromtimeentries.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/tags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'text/plain';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change tag names from time entries
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changetagnamesfromtimeentries: async (body: string, teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling changetagnamesfromtimeentries.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling changetagnamesfromtimeentries.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/tags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'text/plain';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a time entry
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createatimeentry: async (body: string, teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createatimeentry.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling createatimeentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'text/plain';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete time a time entry
         * @param {number} teamId 
         * @param {string} timeEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletetimeatimeentry: async (teamId: number, timeEntryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deletetimeatimeentry.');
            }
            // verify required parameter 'timeEntryId' is not null or undefined
            if (timeEntryId === null || timeEntryId === undefined) {
                throw new RequiredError('timeEntryId','Required parameter timeEntryId was null or undefined when calling deletetimeatimeentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/{time_entry_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"time_entry_id"}}`, encodeURIComponent(String(timeEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all tags from time entries
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getalltagsfromtimeentries: async (teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getalltagsfromtimeentries.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/tags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get running time entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getrunningtimeentry: async (teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getrunningtimeentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/current`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get singular time entry
         * @param {number} teamId 
         * @param {string} timeEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getsingulartimeentry: async (teamId: number, timeEntryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getsingulartimeentry.');
            }
            // verify required parameter 'timeEntryId' is not null or undefined
            if (timeEntryId === null || timeEntryId === undefined) {
                throw new RequiredError('timeEntryId','Required parameter timeEntryId was null or undefined when calling getsingulartimeentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/{time_entry_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"time_entry_id"}}`, encodeURIComponent(String(timeEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get time entries within a date range
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettimeentrieswithinadaterange: async (teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling gettimeentrieswithinadaterange.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove tags from timer entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removetagsfromtimerentry: async (teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling removetagsfromtimerentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/tags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start a time entry
         * @param {number} teamId 
         * @param {string} timerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startatimeentry: async (teamId: number, timerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling startatimeentry.');
            }
            // verify required parameter 'timerId' is not null or undefined
            if (timerId === null || timerId === undefined) {
                throw new RequiredError('timerId','Required parameter timerId was null or undefined when calling startatimeentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/start/{timer_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"timer_id"}}`, encodeURIComponent(String(timerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop current time entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopcurrenttimeentry: async (teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling stopcurrenttimeentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/stop`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a time entry
         * @param {string} body 
         * @param {number} customTaskIds 
         * @param {number} teamId 
         * @param {string} timerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateatimeentry: async (body: string, customTaskIds: number, teamId: number, timerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateatimeentry.');
            }
            // verify required parameter 'customTaskIds' is not null or undefined
            if (customTaskIds === null || customTaskIds === undefined) {
                throw new RequiredError('customTaskIds','Required parameter customTaskIds was null or undefined when calling updateatimeentry.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling updateatimeentry.');
            }
            // verify required parameter 'timerId' is not null or undefined
            if (timerId === null || timerId === undefined) {
                throw new RequiredError('timerId','Required parameter timerId was null or undefined when calling updateatimeentry.');
            }
            const localVarPath = `/api/v2/team/{team_id}/time_entries/{timer_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"timer_id"}}`, encodeURIComponent(String(timerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (customTaskIds !== undefined) {
                localVarQueryParameter['custom_task_ids'] = customTaskIds;
            }

            localVarHeaderParameter['Content-Type'] = 'text/plain';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeTracking20Api - functional programming interface
 * @export
 */
export const TimeTracking20ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add tags from time entries
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addtagsfromtimeentries(body: string, teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).addtagsfromtimeentries(body, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Change tag names from time entries
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changetagnamesfromtimeentries(body: string, teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).changetagnamesfromtimeentries(body, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a time entry
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createatimeentry(body: string, teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).createatimeentry(body, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete time a time entry
         * @param {number} teamId 
         * @param {string} timeEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletetimeatimeentry(teamId: number, timeEntryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).deletetimeatimeentry(teamId, timeEntryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all tags from time entries
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getalltagsfromtimeentries(teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).getalltagsfromtimeentries(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get running time entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getrunningtimeentry(teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).getrunningtimeentry(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get singular time entry
         * @param {number} teamId 
         * @param {string} timeEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getsingulartimeentry(teamId: number, timeEntryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).getsingulartimeentry(teamId, timeEntryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get time entries within a date range
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gettimeentrieswithinadaterange(teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).gettimeentrieswithinadaterange(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove tags from timer entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removetagsfromtimerentry(teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).removetagsfromtimerentry(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Start a time entry
         * @param {number} teamId 
         * @param {string} timerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startatimeentry(teamId: number, timerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).startatimeentry(teamId, timerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Stop current time entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopcurrenttimeentry(teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).stopcurrenttimeentry(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a time entry
         * @param {string} body 
         * @param {number} customTaskIds 
         * @param {number} teamId 
         * @param {string} timerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateatimeentry(body: string, customTaskIds: number, teamId: number, timerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimeTracking20ApiAxiosParamCreator(configuration).updateatimeentry(body, customTaskIds, teamId, timerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TimeTracking20Api - factory interface
 * @export
 */
export const TimeTracking20ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add tags from time entries
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addtagsfromtimeentries(body: string, teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).addtagsfromtimeentries(body, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change tag names from time entries
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changetagnamesfromtimeentries(body: string, teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).changetagnamesfromtimeentries(body, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a time entry
         * @param {string} body 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createatimeentry(body: string, teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).createatimeentry(body, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete time a time entry
         * @param {number} teamId 
         * @param {string} timeEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletetimeatimeentry(teamId: number, timeEntryId: string, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).deletetimeatimeentry(teamId, timeEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all tags from time entries
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getalltagsfromtimeentries(teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).getalltagsfromtimeentries(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get running time entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getrunningtimeentry(teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).getrunningtimeentry(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get singular time entry
         * @param {number} teamId 
         * @param {string} timeEntryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getsingulartimeentry(teamId: number, timeEntryId: string, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).getsingulartimeentry(teamId, timeEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get time entries within a date range
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettimeentrieswithinadaterange(teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).gettimeentrieswithinadaterange(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove tags from timer entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removetagsfromtimerentry(teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).removetagsfromtimerentry(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start a time entry
         * @param {number} teamId 
         * @param {string} timerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startatimeentry(teamId: number, timerId: string, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).startatimeentry(teamId, timerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop current time entry
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopcurrenttimeentry(teamId: number, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).stopcurrenttimeentry(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a time entry
         * @param {string} body 
         * @param {number} customTaskIds 
         * @param {number} teamId 
         * @param {string} timerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateatimeentry(body: string, customTaskIds: number, teamId: number, timerId: string, options?: any): AxiosPromise<void> {
            return TimeTracking20ApiFp(configuration).updateatimeentry(body, customTaskIds, teamId, timerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimeTracking20Api - object-oriented interface
 * @export
 * @class TimeTracking20Api
 * @extends {BaseAPI}
 */
export class TimeTracking20Api extends BaseAPI {
    /**
     * 
     * @summary Add tags from time entries
     * @param {string} body 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public addtagsfromtimeentries(body: string, teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).addtagsfromtimeentries(body, teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Change tag names from time entries
     * @param {string} body 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public changetagnamesfromtimeentries(body: string, teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).changetagnamesfromtimeentries(body, teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a time entry
     * @param {string} body 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public createatimeentry(body: string, teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).createatimeentry(body, teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete time a time entry
     * @param {number} teamId 
     * @param {string} timeEntryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public deletetimeatimeentry(teamId: number, timeEntryId: string, options?: any) {
        return TimeTracking20ApiFp(this.configuration).deletetimeatimeentry(teamId, timeEntryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all tags from time entries
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public getalltagsfromtimeentries(teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).getalltagsfromtimeentries(teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get running time entry
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public getrunningtimeentry(teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).getrunningtimeentry(teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get singular time entry
     * @param {number} teamId 
     * @param {string} timeEntryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public getsingulartimeentry(teamId: number, timeEntryId: string, options?: any) {
        return TimeTracking20ApiFp(this.configuration).getsingulartimeentry(teamId, timeEntryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get time entries within a date range
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public gettimeentrieswithinadaterange(teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).gettimeentrieswithinadaterange(teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Remove tags from timer entry
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public removetagsfromtimerentry(teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).removetagsfromtimerentry(teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Start a time entry
     * @param {number} teamId 
     * @param {string} timerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public startatimeentry(teamId: number, timerId: string, options?: any) {
        return TimeTracking20ApiFp(this.configuration).startatimeentry(teamId, timerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Stop current time entry
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public stopcurrenttimeentry(teamId: number, options?: any) {
        return TimeTracking20ApiFp(this.configuration).stopcurrenttimeentry(teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a time entry
     * @param {string} body 
     * @param {number} customTaskIds 
     * @param {number} teamId 
     * @param {string} timerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTracking20Api
     */
    public updateatimeentry(body: string, customTaskIds: number, teamId: number, timerId: string, options?: any) {
        return TimeTracking20ApiFp(this.configuration).updateatimeentry(body, customTaskIds, teamId, timerId, options).then((request) => request(this.axios, this.basePath));
    }
}
